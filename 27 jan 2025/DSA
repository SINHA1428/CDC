229. Majority Element II
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109

SOLUTION:
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
          int n = nums.size();
        unordered_map<int, int> freqMap; 
        for (int num : nums) {
            freqMap[num]++;
        }
        vector<int> result;
        for (auto& pair : freqMap) {
            if (pair.second > n / 3) {
                result.push_back(pair.first);
            }
        }
        
        return result;
    }
};


2404. Most Frequent Even Element
Given an integer array nums, return the most frequent even element.

If there is a tie, return the smallest one. If there is no such element, return -1.

 

Example 1:

Input: nums = [0,1,2,2,4,4,1]
Output: 2
Explanation:
The even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.
We return the smallest one, which is 2.
Example 2:

Input: nums = [4,4,4,9,2,4]
Output: 4
Explanation: 4 is the even element appears the most.
Example 3:

Input: nums = [29,47,21,41,13,37,25,7]
Output: -1
Explanation: There is no even element.
 

Constraints:

1 <= nums.length <= 2000
0 <= nums[i] <= 105

SOLUTION:

class Solution {
public:
    int mostFrequentEven(vector<int>& nums) {
        unordered_map<int,int>m;
        for(int num:nums){
            if(num%2==0){
                m[num]++;
            }
        }

        int ans =0;
        int val=-1;
        
        for(const auto& pair:m){
            int num=pair.first;
            int freq=pair.second;
            if(freq>ans||(freq==ans && num<val)){
                ans=freq;
                val=num;
            }
        }

        return val;
    }
};



347. Top K Frequent Elements
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

SOLUTION:
vector<int> topKFrequent(vector<int>& nums, int k) {
    unordered_map<int, int> freqMap;
    for (int num : nums) {
        freqMap[num]++;
    }
    priority_queue<pair<int, int>> maxHeap;
    for (const auto& [num, freq] : freqMap) {
        maxHeap.emplace(freq, num);
    }
    vector<int> result;
    for (int i = 0; i < k; ++i) {
        result.push_back(maxHeap.top().second);
        maxHeap.pop();
    }
    
    return result;
}


